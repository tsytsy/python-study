上午任务：
	学习git知识，将之后写的代码放入到自己的github中，便于管理和记录

什么是github?
个人理解，github是一个版本控制软件，当自己的版本需要进行更迭时，你可以把代码推到远程，切GitHub会记录你每次代码文件的变动
同时也便于多个人开发一个项目， 每个人只需要将自己改动的代码推到自己的分支上即可，GitHub也会记录每次上传代码改动的部分，
若此时出现bug，github支持回滚到之前的版本。

比如为了防止代码的丢失，肯定本地机器与远程服务器都要存放一份，而且还需要有一套机制让本地可以跟远程同步；

又比如我们经常是好几个人做同一个项目，都要对一份代码做更改，这个时候需要大家互不影响，又需要各自可以同步别人的代码；

又比如我们开发的时候免不了有bug，有时候刚发布的功能就出现了严重的bug，这个时候需要紧急对代码进行还原；

又比如随着我们版本迭代的功能越来越多，但是我们需要清楚的知道历史每一个版本的代码更改记录，甚至知道每个人历史提交代码的情况；
等等等类似以上的情况，这些都是版本控制系统能解决的问题。所以说，版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定
版本修订情况的系统，对于软件开发领域来说版本控制是最重要的一环，而 Git 毫无疑问是当下最流行、最好用的版本控制系统。

git使用
建立文件夹
在进行任何 Git 操作之前，都要先切换到 Git 仓库目录，也就是先要先切换到项目的文件夹目录下。


git命令
1. git init 初始化git仓库
2. git status 查看git仓库的状态
3. git add 
4. git commit -m '注释'
5. git push origin master




github的注册以及页面的基本介绍。
你拥有了一个 GitHub 账号之后，就可以自由的 clone 或者下载其他项目，也可以创建自己的项目，但是你没法提交代码。

Repository
仓库的意思，即你的项目，你想在 GitHub 上开源一个项目，那就必须要新建一个 Repository ，如果你开源的项目多了，你就拥有了多个 Repositories 。

Fork
这个不好翻译，如果实在要翻译我把他翻译成分叉，什么意思呢？你开源了一个项目，别人想在你这个项目的基础上做些改进，
然后应用到自己的项目中，这个时候他就可以 Fork 你的项目，这个时候他的 GitHub 主页上就多了一个项目，只不过这个项目是基于
你的项目基础（本质上是在原有项目的基础上新建了一个分支，分支的概念后面会在讲解Git的时候说到），他就可以随心所欲的去改进，
但是丝毫不会影响原有项目的代码与结构。

Star
这个好理解，就是给项目点赞，但是在 GitHub 上的点赞远比微博、知乎点赞难的多，如果你有一个项目获得100个star都算很不容易了！

Watch
这个也好理解就是观察，如果你 Watch 了某个项目，那么以后只要这个项目有任何更新，你都会第一时间收到关于这个项目的通知提醒。



向GITHUB 提交代码
提交代码之前一定是需要某种授权的，而 GitHub 上一般都是基于 SSH 授权的。




ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvny5J4lsWRgWD6noc44f9/sfDF6qDAZfi2BHfXj3jK/ElyTWHRgwXxPqLwgMvQXn2Vs48OwyADC4fSoaxZngbOFGNZ1LtaIhynTGWNEp0yTcKN5EVhTp4y5+7RrzIQvD8yk+DLLMCiAo3se8cIqV1sDkh1dLa5eB1T4ST/YueHuLzv7ili+zkADA8QfulSoxYw4417uTT9q20jA2/XYO0En8/yym3Jw7XsrK9ecPnbZmUdcAEVkxlbA1jpSUAvtP80JeAUYIfMB3EqajxBD44e3j/VG9Tq4ercfwekUm8xp9hx/Z79su5LslHF0RGDpDur0XTzvhvQRCyzSq9QEQf xianer@DESKTOP-7M6VGM7