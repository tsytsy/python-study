正则表达式
^ 开始
$ 结束

+ 	  匹配至少一个先前字符      #ab+  ----->ab abc abb	abbc ....
?	  匹配0个或者多个先前字符   #ab?----->a ab abc abb abbc ....
								#ab?$------>a ab 
								ab?*$-----------------------------------------------------?????
{n}	  匹配先前字符n次           #ab{3}---->abbb abbbb	abbbc
{n,m} 匹配n到m个先前字符		#ab{2,4}---->abb abbc abbb abbbc abbbb abbbbc
								#ab{2,4}$----->abb abbb abbbb
(ab)+

*	   先前字符出现0到无穷个	#ab* a ab abb abbb abbbb ........
[]     取括号内任意一个字符     #^[a-Z\/\-]---->取字母、/和-中的任意一个
.      所有的单个字符。
-	   范围  					#[a-zA-Z] 取任意一个字母
\：    忽略正则表达式中特殊字符的原有含义。

[^]    取反  ^[^0-9]非数字开头
| 		或   compan(y|ies) 



r[0-9]+t                 #r和t之间有任意个数字 r1t r2t r12t r123123215436t
r[0-9][0-9]t r[0-9]{2}   #取出rt间只有两个数字的字符串




grep：Global Regular Expression Print
Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。
grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。
grep [option] pattern filename
[options]主要参数：
-c：只输出匹配行的计数。
-I：不区分大小写(只适用于单字符)。
-h：查询多文件时不显示文件名。
-l：查询多文件时只输出包含匹配字符的文件名。
-n：显示匹配行及行号。
-s：不显示不存在或无匹配文本的错误信息。
-v：显示不包含匹配文本的所有行。

pattern正则表达式主要参数：



[ ]：单个字符，如[A]即A符合要求 。
[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。
.：所有的单个字符。




sed: steam editor
sed是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储
在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。
接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或
多个文件；简化对文件的反复操作；编写转换程序等。



sed [options] 'command' file(s) 
sed [options] -f scriptfile file(s)

options
 -e<script>或者--expression=<script>:以选项中的指定的script来处理输入的文本文件
 -f或--file=：以选项中指定的script文件来处理输入的文本文件；
 -h或--help：显示帮助；
 -n或--quiet或——silent：仅显示script处理后的结果；
 -V或--version：显示版本信息。


sed command
 a\ 在当前行下面插入文本。 
 i\ 在当前行上面插入文本。 
 c\ 把选定的行改为新的文本。
 d 删除，删除选择的行。 
 D 删除模板块的第一行。 
 s 替换指定字符 
 h 拷贝模板块的内容到内存中的缓冲区。
 H 追加模板块的内容到内存中的缓冲区。
 g 获得内存缓冲区的内容，并替代当前模板块中的文本。
 G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
 l 列表不能打印字符的清单。
 n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。 
 N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
 p 打印模板块的行。
 P(大写) 打印模板块的第一行。 
 q 退出Sed。 
 b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
 r file 从file中读行。
 t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
 T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
 w file 写并追加模板块到file末尾。 W file 写并追加模板块的第一行到file末尾。 ! 表示后面的命令对所有没有被选定的行发生作用。


定位      操作
数字定位


sed '3d' passwd #把第三行删除
sed -n '3p' passwd #打印第三行
sed '/^s/c 1111' a.txt #把s开头的行该为11111
sed  'c 1111' a.txt  #把所有的行全部改为1111，不加行定位，默认为所有行
sed 's/sb/SB/g' a.txt  #把a.txt中所有出现sb全部换成SB，没有出现行定位
sed '/^[0-9]/s/sb/SB/g' a.txt  #把a.txt所有数字开头行的sb全部换成SB

sed -r 's/(^.)(.*)/\2/g' passwd  #删除文件每行的第一个字符。
sed -r 's/(^.)(.)(.*)/\1\3/g' passwd  #删除文件每行的第二个字符。
sed -r 's/(.*)(.$)/\1/g' passwd     #删除文件每行的最后一个字符。
sed -r '/^ *$/d' passwd         #删除空行
sed -r 's/(.*)(.)(.$)/\1\3/g' passwd    #删除文件每行的倒数第二个字符。
sed -r 's/(^[a-Z0-9]+)([^a-Z0-9]*)(.*)/\2\3/' passwd   #删除文件每行的第1个单词
sed -r 's/([^a-Z]*)([a-Z0-9]+$)/\1/' passwd   #删除文件每行的最后1个单词
sed -r 's/(^[a-Z0-9]*)([^a-Z0-9])([a-Z0-9]*)([^a-Z0-9])/\3\2\1\4/' passwd  #每一行的第一个单词和第二个单词换位置
sed -r 's/(^[a-z]+)([^a-z]+)([a-z]+)([^a-z])(.*)/\1\2\4\5/' passwd    #删除每行的第二个单词
sed -r 's/(.*)([^a-z]+)([a-z]+)([^a-z]+)([a-z]+$)/\1\2\4\5/' passwd   #删除文件每行的倒数第二个单词。
sed -r 's/(.*)([^a-z]+)([a-z]+$)/\1\2/' passwd         #删除文件每行的最后一个单词
sed -r 's/(^.)(.)/\2\1/' passwd      #交换每行的第一个字符和第二个字符
sed -r 's/(^.)([a-z]+)([^a-z]+)([a-z]+)([^a-z])/\4\2\3\1\5/' passwd    #交换每行的第一个字符和第二个单词
sed -r 's/(^[a-z]+)([^a-z]+)(.*)([^a-z]+)([a-z]+$)/\5\2\3\4\1/' passwd   #交换每行的第一个单词和最后一个单词
sed -r 's/[0-9]+//g' passwd    #删除一个文件中所有的数字。
sed -r 's/^ *//' passwd    #删除每行开头的所有空格
sed -r 's/[ ]/\\t/g' passwd     #用制表符替换文件中出现的所有空格
sed -r 's/([A-Z])/(\1)/g' passwd    #把所有大写字母用括号（）括起来
sed -r 'p;p' passwd     #打印每行3次
sed -r '1~2d' passwd    #隔行删除。
sed -r 's/(^[a-z]*)([^a-z]+)(.*)/\1/' passwd    #只显示每行的第一个单词
sed -r 's/(^[a-z]+)([^a-z]+)([a-z]+)([^a-z]+)([a-z]+)([^a-z])(.*)/\1\2\5/' passwd    #打印每行的第一个单词和第三个单词。




awk
awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来
说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。awk有3个不同版本: awk、nawk和gawk，
未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 
姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。
它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。


NF：当前记录中的字段个数
NR: 已经读出的记录行数


awk -F : '$3>6 && $3<10{print $3}' passwd    #打印uid在6~10范围内的用户名
awk -F : 'NR>=5 && NR<=10 {print NR,$1}' passwd    #打印第5-10行的行号和用户名
awk -F : 'NR%2 {print NR}' passwd    #打印奇数行
awk -F : '!(NR%2)' passwd   #打印偶数行  
awk -F : '$3>5{print}' passwd   #打印字段数大于5的行
awk -F : '$3!=$4{print}' passwd   #打印UID不等于GID的用户名
打印没有指定shell的用户